// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: catalog_service/services.proto

package catalog

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("catalog_service/services.proto", fileDescriptor_4b4fb7c4077dedf6) }

var fileDescriptor_4b4fb7c4077dedf6 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x8b, 0xc4, 0x41, 0x7e, 0x9c, 0xa8, 0x48, 0x35, 0x3d, 0x70, 0x36, 0x98, 0xe0, 0x41,
	0x63, 0x62, 0x82, 0x54, 0xd3, 0x98, 0x78, 0xc2, 0x78, 0x36, 0x05, 0x26, 0x48, 0xc0, 0x6c, 0xed,
	0xae, 0x26, 0xbc, 0x89, 0x07, 0x1f, 0xc8, 0xa3, 0x8f, 0x60, 0xf0, 0x45, 0xcc, 0xee, 0xb4, 0xb5,
	0xc0, 0x1a, 0xe1, 0xd4, 0xcc, 0xf7, 0xd7, 0x99, 0x2f, 0x2d, 0xb8, 0xfd, 0x40, 0x05, 0x13, 0x31,
	0x7c, 0x90, 0x14, 0xbd, 0x8e, 0xfa, 0x74, 0x1c, 0x3f, 0x65, 0x33, 0x8c, 0x84, 0x12, 0x58, 0x88,
	0x79, 0xc7, 0x59, 0x14, 0xf6, 0x84, 0x18, 0xb3, 0xc8, 0x39, 0x5c, 0xe4, 0x82, 0x17, 0xf5, 0x28,
	0xa2, 0x98, 0x5d, 0x7a, 0x45, 0x3f, 0x50, 0x34, 0x14, 0xd1, 0x94, 0xf9, 0xd6, 0x7b, 0x01, 0xca,
	0x1e, 0x4b, 0xee, 0x58, 0x81, 0x47, 0x00, 0x5e, 0x44, 0x81, 0xa2, 0x8e, 0x10, 0x63, 0x2c, 0x35,
	0xe3, 0x84, 0xa6, 0x1e, 0x9d, 0xf9, 0xb1, 0x91, 0xd3, 0xea, 0xfb, 0x70, 0xb0, 0xaa, 0xfa, 0x14,
	0x8a, 0x3e, 0x29, 0x3d, 0x74, 0xa6, 0x37, 0x03, 0xac, 0xa5, 0x7c, 0x06, 0xed, 0xd2, 0xf3, 0xb2,
	0xb1, 0x0d, 0x95, 0x2b, 0x9a, 0x90, 0xa2, 0xc1, 0xff, 0x66, 0x4c, 0x89, 0xeb, 0xa7, 0x50, 0x4d,
	0xbb, 0x24, 0xc3, 0x46, 0x0e, 0xcf, 0x61, 0xf3, 0x76, 0x24, 0x8d, 0x50, 0xe2, 0x4e, 0x2a, 0x49,
	0x30, 0x6d, 0xdc, 0xb5, 0xa0, 0xc6, 0xdb, 0x82, 0x2d, 0xae, 0xe4, 0xd2, 0x74, 0x8b, 0x95, 0x54,
	0xc8, 0x80, 0xb3, 0x08, 0xb0, 0x87, 0x8b, 0x59, 0xc3, 0x73, 0x01, 0x25, 0x9f, 0x14, 0x8f, 0xe6,
	0xc6, 0x7a, 0xf6, 0xc6, 0x5f, 0x5c, 0x2f, 0x6b, 0xb1, 0x7b, 0x50, 0xe5, 0x92, 0x56, 0x4b, 0xb0,
	0xf7, 0xd4, 0x86, 0xa2, 0xbe, 0x9e, 0xa5, 0x12, 0xf7, 0xe6, 0x3a, 0x61, 0x54, 0x9b, 0x6b, 0x56,
	0xdc, 0x24, 0x9c, 0x41, 0x99, 0xdb, 0xf2, 0xe2, 0x6f, 0x0d, 0xb7, 0x53, 0x71, 0x02, 0x39, 0xcb,
	0x10, 0x3b, 0xb9, 0xb3, 0xb5, 0x9d, 0x1e, 0x54, 0x7c, 0x52, 0x09, 0x60, 0x2e, 0x3f, 0xc8, 0x5e,
	0x9e, 0x65, 0xf4, 0xfa, 0xd6, 0x10, 0x1f, 0x90, 0xfb, 0x5b, 0x3d, 0xc7, 0xde, 0xa1, 0x0f, 0x65,
	0xdd, 0x4a, 0x2c, 0x1e, 0x91, 0xc4, 0xfd, 0xb9, 0xba, 0x92, 0x14, 0x9d, 0x50, 0xff, 0x83, 0xd1,
	0x41, 0x9d, 0xea, 0xc7, 0xcc, 0xcd, 0x7f, 0xce, 0xdc, 0xfc, 0xd7, 0xcc, 0xcd, 0xbf, 0x7d, 0xbb,
	0xb9, 0xde, 0x86, 0xf9, 0x6f, 0x4f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x34, 0x1d, 0x92,
	0x3c, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatalogServiceClient interface {
	// CRUD for Books
	CreateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	UpdateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	GetBookById(ctx context.Context, in *GetBookByIdReq, opts ...grpc.CallOption) (*Book, error)
	DeletedBookById(ctx context.Context, in *GetBookByIdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	ListBooks(ctx context.Context, in *ListBookReq, opts ...grpc.CallOption) (*ListBookResp, error)
	// CRUD for Authors
	CreateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error)
	UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error)
	GetAuthorById(ctx context.Context, in *GetAuthorByIdReq, opts ...grpc.CallOption) (*Author, error)
	DeleteAuthorById(ctx context.Context, in *GetAuthorByIdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	ListAuthors(ctx context.Context, in *ListAuthorReq, opts ...grpc.CallOption) (*ListAuthorResp, error)
	// CRUD for Categories
	CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
	GetCategoryById(ctx context.Context, in *GetCategoryByIdReq, opts ...grpc.CallOption) (*Category, error)
	DeleteCategoryById(ctx context.Context, in *GetCategoryByIdReq, opts ...grpc.CallOption) (*EmptyResp, error)
	ListCategories(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error)
}

type catalogServiceClient struct {
	cc *grpc.ClientConn
}

func NewCatalogServiceClient(cc *grpc.ClientConn) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) CreateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetBookById(ctx context.Context, in *GetBookByIdReq, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/GetBookById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeletedBookById(ctx context.Context, in *GetBookByIdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/DeletedBookById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListBooks(ctx context.Context, in *ListBookReq, opts ...grpc.CallOption) (*ListBookResp, error) {
	out := new(ListBookResp)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/ListBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetAuthorById(ctx context.Context, in *GetAuthorByIdReq, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/GetAuthorById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteAuthorById(ctx context.Context, in *GetAuthorByIdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/DeleteAuthorById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListAuthors(ctx context.Context, in *ListAuthorReq, opts ...grpc.CallOption) (*ListAuthorResp, error) {
	out := new(ListAuthorResp)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/ListAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) CreateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) UpdateCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByIdReq, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) DeleteCategoryById(ctx context.Context, in *GetCategoryByIdReq, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/DeleteCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) ListCategories(ctx context.Context, in *ListCategoryReq, opts ...grpc.CallOption) (*ListCategoryResp, error) {
	out := new(ListCategoryResp)
	err := c.cc.Invoke(ctx, "/catalog.CatalogService/ListCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
type CatalogServiceServer interface {
	// CRUD for Books
	CreateBook(context.Context, *Book) (*Book, error)
	UpdateBook(context.Context, *Book) (*Book, error)
	GetBookById(context.Context, *GetBookByIdReq) (*Book, error)
	DeletedBookById(context.Context, *GetBookByIdReq) (*EmptyResp, error)
	ListBooks(context.Context, *ListBookReq) (*ListBookResp, error)
	// CRUD for Authors
	CreateAuthor(context.Context, *Author) (*Author, error)
	UpdateAuthor(context.Context, *Author) (*Author, error)
	GetAuthorById(context.Context, *GetAuthorByIdReq) (*Author, error)
	DeleteAuthorById(context.Context, *GetAuthorByIdReq) (*EmptyResp, error)
	ListAuthors(context.Context, *ListAuthorReq) (*ListAuthorResp, error)
	// CRUD for Categories
	CreateCategory(context.Context, *Category) (*Category, error)
	UpdateCategory(context.Context, *Category) (*Category, error)
	GetCategoryById(context.Context, *GetCategoryByIdReq) (*Category, error)
	DeleteCategoryById(context.Context, *GetCategoryByIdReq) (*EmptyResp, error)
	ListCategories(context.Context, *ListCategoryReq) (*ListCategoryResp, error)
}

// UnimplementedCatalogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCatalogServiceServer struct {
}

func (*UnimplementedCatalogServiceServer) CreateBook(ctx context.Context, req *Book) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (*UnimplementedCatalogServiceServer) UpdateBook(ctx context.Context, req *Book) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (*UnimplementedCatalogServiceServer) GetBookById(ctx context.Context, req *GetBookByIdReq) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookById not implemented")
}
func (*UnimplementedCatalogServiceServer) DeletedBookById(ctx context.Context, req *GetBookByIdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletedBookById not implemented")
}
func (*UnimplementedCatalogServiceServer) ListBooks(ctx context.Context, req *ListBookReq) (*ListBookResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (*UnimplementedCatalogServiceServer) CreateAuthor(ctx context.Context, req *Author) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (*UnimplementedCatalogServiceServer) UpdateAuthor(ctx context.Context, req *Author) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (*UnimplementedCatalogServiceServer) GetAuthorById(ctx context.Context, req *GetAuthorByIdReq) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorById not implemented")
}
func (*UnimplementedCatalogServiceServer) DeleteAuthorById(ctx context.Context, req *GetAuthorByIdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorById not implemented")
}
func (*UnimplementedCatalogServiceServer) ListAuthors(ctx context.Context, req *ListAuthorReq) (*ListAuthorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthors not implemented")
}
func (*UnimplementedCatalogServiceServer) CreateCategory(ctx context.Context, req *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (*UnimplementedCatalogServiceServer) UpdateCategory(ctx context.Context, req *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (*UnimplementedCatalogServiceServer) GetCategoryById(ctx context.Context, req *GetCategoryByIdReq) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (*UnimplementedCatalogServiceServer) DeleteCategoryById(ctx context.Context, req *GetCategoryByIdReq) (*EmptyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryById not implemented")
}
func (*UnimplementedCatalogServiceServer) ListCategories(ctx context.Context, req *ListCategoryReq) (*ListCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}

func RegisterCatalogServiceServer(s *grpc.Server, srv CatalogServiceServer) {
	s.RegisterService(&_CatalogService_serviceDesc, srv)
}

func _CatalogService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetBookById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetBookById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/GetBookById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetBookById(ctx, req.(*GetBookByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeletedBookById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeletedBookById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/DeletedBookById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeletedBookById(ctx, req.(*GetBookByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/ListBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListBooks(ctx, req.(*ListBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetAuthorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetAuthorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/GetAuthorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetAuthorById(ctx, req.(*GetAuthorByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteAuthorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteAuthorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/DeleteAuthorById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteAuthorById(ctx, req.(*GetAuthorByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/ListAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListAuthors(ctx, req.(*ListAuthorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).CreateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).UpdateCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).GetCategoryById(ctx, req.(*GetCategoryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_DeleteCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).DeleteCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/DeleteCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).DeleteCategoryById(ctx, req.(*GetCategoryByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.CatalogService/ListCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).ListCategories(ctx, req.(*ListCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CatalogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _CatalogService_CreateBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _CatalogService_UpdateBook_Handler,
		},
		{
			MethodName: "GetBookById",
			Handler:    _CatalogService_GetBookById_Handler,
		},
		{
			MethodName: "DeletedBookById",
			Handler:    _CatalogService_DeletedBookById_Handler,
		},
		{
			MethodName: "ListBooks",
			Handler:    _CatalogService_ListBooks_Handler,
		},
		{
			MethodName: "CreateAuthor",
			Handler:    _CatalogService_CreateAuthor_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _CatalogService_UpdateAuthor_Handler,
		},
		{
			MethodName: "GetAuthorById",
			Handler:    _CatalogService_GetAuthorById_Handler,
		},
		{
			MethodName: "DeleteAuthorById",
			Handler:    _CatalogService_DeleteAuthorById_Handler,
		},
		{
			MethodName: "ListAuthors",
			Handler:    _CatalogService_ListAuthors_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _CatalogService_CreateCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _CatalogService_UpdateCategory_Handler,
		},
		{
			MethodName: "GetCategoryById",
			Handler:    _CatalogService_GetCategoryById_Handler,
		},
		{
			MethodName: "DeleteCategoryById",
			Handler:    _CatalogService_DeleteCategoryById_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _CatalogService_ListCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog_service/services.proto",
}
